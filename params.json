{"name":"Search","tagline":"Golang实现的搜索引擎","body":"# search\r\nGolang实现的搜索引擎\r\n\r\n##使用过程中遇到任何问题，请联系QQ: 316052486\r\n\r\n详细用法见: github.com/aosen/searchserver\r\n\r\n##思维脑图\r\n\r\n![思维脑图](http://i4.tietuku.com/90be97573a6c3115.png \"思维脑图\")\r\n\r\n#几个重要结构体\r\n##搜索引擎初始化结构体\r\n```Golang\r\ntype EngineInitOptions struct {\r\n\t// 半角逗号分隔的字典文件，具体用法见\r\n    //分词器接口\r\n\tSegmenter SearchSegmenter\r\n\r\n\t// 停用词文件\r\n\tStopTokenFile string\r\n\r\n\t// 分词器线程数\r\n\tNumSegmenterThreads int\r\n\r\n\t// 索引器和排序器的shard数目\r\n\t// 被检索/排序的文档会被均匀分配到各个shard中\r\n\tNumShards int\r\n\r\n\t// 索引器的信道缓冲长度\r\n\tIndexerBufferLength int\r\n\r\n\t// 索引器每个shard分配的线程数\r\n\tNumIndexerThreadsPerShard int\r\n\r\n\t// 排序器的信道缓冲长度\r\n\tRankerBufferLength int\r\n\r\n\t// 排序器每个shard分配的线程数\r\n\tNumRankerThreadsPerShard int\r\n\r\n\t// 索引器初始化选项\r\n\tIndexerInitOptions *IndexerInitOptions\r\n\r\n\t// 默认的搜索选项\r\n\tDefaultRankOptions *RankOptions\r\n\r\n\t// 是否使用持久数据库，以及数据库文件保存的目录和裂分数目\r\n\tUsePersistentStorage    bool\r\n    //索引持久化\r\n    //pipline接口\r\n    SearchPipline SearchPipline\r\n}\r\n```\r\n##建立索引结构体\r\n```Golang\r\ntype DocumentIndexData struct {\r\n\t// 文档全文（必须是UTF-8格式），用于生成待索引的关键词\r\n\tContent string\r\n\r\n\t// 文档的关键词\r\n\t// 当Content不为空的时候，优先从Content中分词得到关键词。\r\n\t// Tokens存在的意义在于绕过内置的分词器，在引擎外部\r\n\t// 进行分词和预处理。\r\n\tTokens []TokenData\r\n\r\n\t// 文档标签（必须是UTF-8格式），比如文档的类别属性等，这些标签并不出现在文档文本中\r\n\tLabels []string\r\n\r\n\t// 文档的评分字段，可以接纳任何类型的结构体\r\n\tFields interface{}\r\n}\r\n```\r\n##建立索引\r\n```Golang\r\nfunc (engine *Engine) IndexDocument(docId uint64, data DocumentIndexData)\r\n```\r\n##搜索请求结构体\r\n```Golang\r\ntype SearchRequest struct {\r\n\t// 搜索的短语（必须是UTF-8格式），会被分词\r\n\t// 当值为空字符串时关键词会从下面的Tokens读入\r\n\tText string\r\n\r\n\t// 关键词（必须是UTF-8格式），当Text不为空时优先使用Text\r\n\t// 通常你不需要自己指定关键词，除非你运行自己的分词程序\r\n\tTokens []string\r\n\r\n\t// 文档标签（必须是UTF-8格式），标签不存在文档文本中，但也属于搜索键的一种\r\n\tLabels []string\r\n\r\n\t// 当不为空时，仅从这些文档中搜索\r\n\tDocIds []uint64\r\n\r\n\t// 排序选项\r\n\tRankOptions *RankOptions\r\n\r\n\t// 超时，单位毫秒（千分之一秒）。此值小于等于零时不设超时。\r\n\t// 搜索超时的情况下仍有可能返回部分排序结果。\r\n\tTimeout int\r\n}\r\n```\r\n##搜索查询符合条件的文档\r\n```Golang\r\nfunc (engine *Engine) Search(request SearchRequest) (output SearchResponse)\r\n```\r\n##搜索引擎返回结构体\r\n```Golang\r\ntype SearchResponse struct {\r\n\t// 搜索用到的关键词\r\n\tTokens []string\r\n\r\n\t// 搜索到的文档，已排序\r\n\tDocs []ScoredDocument\r\n\r\n\t// 搜索是否超时。超时的情况下也可能会返回部分结果\r\n\tTimeout bool\r\n}\r\n```\r\n\r\n#开发进度\r\n* 2015-12-17 分词器接口化  ***done***\r\n* 2015-12-17 优化目录结构  ***done***\r\n* 2015-12-17 优化搜索效率  ***done***\r\n* 2015-12-04 增加索引存储方式： mongodb ***done***\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}